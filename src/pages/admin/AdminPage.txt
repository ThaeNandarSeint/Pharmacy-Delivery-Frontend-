import Cookies from "js-cookie";
import { useState } from "react";
import { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Outlet, useNavigate } from "react-router-dom";
// import { AuthContext } from "../../AuthContext";
import Sidebar from "../../components/admin/Sidebar";
import Topbar from "../../components/Topbar";
import { myInfo } from "../../redux/actions/user.action";

const AdminPage = () => {
  const navigate = useNavigate();
  const accessToken = Cookies.get("accessToken");
  const [me, setMe] = useState({});
  const [isAuthorized, setIsAuthorized] = useState(false);
  const [role, setRole] = useState(null);

  const dispatch = useDispatch();

  const payload = useSelector((state) => state.myInfoDetail);

  const { loading, error, data } = payload;

  useEffect(() => {
    if (!accessToken) {
      return navigate("/login");
    }

    dispatch(myInfo());

    setMe(data.payload);
  }, [dispatch]);

  useEffect(() => {
    if (me) {
      const { roleType } = me;

      if (
        roleType !== "Superadmin" &&
        roleType !== "Admin" &&
        roleType !== "Supervisor" &&
        roleType !== "Operator"
      ) {
        // setRole(null)
      } else {
        setRole(roleType);
        setIsAuthorized(true);
      }
    }
  }, []);
  // console.log(loading);

  // useEffect(() => {
  // if (!accessToken) {
  //   return navigate("/login");
  // }

  //   // async function fetchData() {
  //   //   setIsLoading(true)
  //   //   try {

  //   //     const { data } = await axios.get(`${userRoute}/me/info`, {
  //   //       headers: {
  //   //         Authorization: accessToken,
  //   //       },
  //   //     });

  //   //     const { roleType } = data.payload

  // if(roleType !== 'Superadmin' && roleType !== "Admin" && roleType !== 'Supervisor' && roleType !== "Operator"){
  //   setRole(null)
  // }else {
  //   setRole(roleType)
  //   setIsAuthorized(true)
  // }

  //   //   } catch (error) {
  //   //     setError(error.response.data.message);
  //   //   }
  //   //   setIsLoading(false)
  //   // }
  //   // fetchData();

  // }, []);

  let render;

  if(me){
    if(!error){
      if(isAuthorized){
        render = (
          <div className="app">
            <Sidebar />
            <div className="content">
              <Topbar />
              <Outlet context={[role, setRole]} />
            </div>
          </div>
        )
      } else {
        render = (
          <div>You are not authorized</div>
        )
      }
    }
    else {
      return navigate('/login')
    }
  }

  return !me ? <div>Loading</div> : (
    render
  )
};

export default AdminPage;
